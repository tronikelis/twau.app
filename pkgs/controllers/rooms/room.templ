package rooms

import (
	"fmt"
	"word-amongus-game/pkgs/game_state"
	"word-amongus-game/pkgs/ui"
)

templ pageRoomId(roomId string) {
	@ui.Page() {
		<div class="flex flex-col gap-0">
			<h1 class="text-5xl text-center">ඞ SUSSY AMONGUS MONGUS WORD GAME ඞ</h1>
			<div
				class="w-full p-12"
				hx-ext="ws"
				ws-connect={ ui.StringURL(fmt.Sprintf("/rooms/%s/ws", roomId)) }
			>
				@partialGameState(nil, "")
			</div>
		</div>
	}
}

templ partialGameState(state game_state.GameState, selfPlayerId string) {
	<div id="game_state" class="grid grid-cols-12 gap-16" hx-swap-oob="outerHTML">
		<div class="col-span-3">
			@partialPlayers(state, selfPlayerId)
		</div>
		<div class="col-span-6">
			@partialPlayerAction(state, selfPlayerId)
		</div>
		<div class="col-span-3">
			@partialGameSynonyms(state)
		</div>
	</div>
}

templ partialGameSynonyms(state game_state.GameState) {
	<div id="game_synonyms" class="flex flex-col gap-6">
		<h2 class="text-4xl">Synonyms</h2>
		<div class="flex flex-col gap-1">
			if state != nil {
				for _, v := range state.Game().Synonyms() {
					<p>{ v.Player.Name } -> { v.Synonym }</p>
				}
			}
		</div>
	</div>
}

templ partialPlayerAction(state game_state.GameState, selfPlayerId string) {
	<div id="player_action" hx-swap-oob="outerHTML" class="flex flex-col gap-6">
		<h2 class="text-4xl">
			State:
			<span class="italic">
				switch state.(type) {
					case *game_state.Game:
						game
					case *game_state.PlayerChooseWord:
						player_choose_word
					case *game_state.PlayerTurn:
						player_turn
				}
			</span>
		</h2>
		switch state := state.(type) {
			case *game_state.Game:
				<button
					type="button"
					ws-send
					hx-vals={ game_state.SerializeJsonPanic(
						game_state.NewActionStartGameJson(),
					) }
				>
					Start game
				</button>
			case *game_state.PlayerChooseWord:
				if state.Game().Players()[state.PlayerIndex()].Id == selfPlayerId {
					for i, v := range state.FromWords() {
						<button
							type="button"
							ws-send
							hx-vals={ game_state.SerializeJsonPanic(
								game_state.NewActionPlayerChooseWordJson(i),
							) }
						>
							{ v }
						</button>
					}
				} else {
					<p>
						Wait for slow ass { state.Game().Players()[state.PlayerIndex()].Name }
						to choose his word
					</p>
				}
			case *game_state.PlayerTurn:
				if state.Game().Players()[state.PlayerIndex()].Id == selfPlayerId {
					<p>It's your turn, what do you want to do?</p>
					<div class="flex flex-row gap-2 items-center">
						<input type="text" name="synonym" placeholder="Synonym:"/>
						<button
							type="button"
							ws-send
							hx-vals={ game_state.SerializeJsonPanic(
								game_state.NewActionPlayerSaySynonymJson(),
							) }
							hx-include="previous"
						>
							Say synonym
						</button>
					</div>
					<button type="button">
						Initialize vote
					</button>
				} else {
					<p>
						Wait for { state.Game().Players()[state.PlayerIndex()].Name } to 
						make his decision
					</p>
				}
		}
	</div>
}

templ playerCard(player game_state.Player, turn bool, selfPlayerId string) {
	<div class="p-2 shadow-xl rounded-2xl border border-gray-600">
		<p>
			if turn {
				HIS TURN ->{ " " }
			}
			<span class={ templ.KV("font-bold text-blue-600", player.Id == selfPlayerId) }>
				{ children... }
			</span>
		</p>
	</div>
}

templ partialPlayers(state game_state.GameState, selfPlayerId string) {
	<div
		class="flex flex-col gap-6"
		id="players"
		hx-swap-oob="outerHTML"
	>
		<h2 class="text-4xl">Players</h2>
		switch state := state.(type) {
			case *game_state.Game:
				for _, v := range state.Players() {
					@playerCard(v, false, selfPlayerId) {
						{ v.Name }
					}
				}
			case game_state.PlayerIndex:
				for i, v := range state.Game().Players() {
					@playerCard(v, state.PlayerIndex() == i, selfPlayerId) {
						{ v.Name }
					}
				}
		}
	</div>
}

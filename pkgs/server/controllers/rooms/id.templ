package rooms

import (
	"fmt"
	"word-amongus-game/pkgs/game_state"
	"word-amongus-game/pkgs/ui"
)

templ pagePlayerCreate(roomId string) {
	@ui.Page() {
		<form
			hx-post={ ui.StringURL(fmt.Sprintf("/rooms/%s", roomId)) }
			class="flex flex-row items-center gap-2"
		>
			<input type="text" name="player_name" placeholder="Your name"/>
			<button type="submit">
				Join
			</button>
		</form>
	}
}

templ pageRoomId(roomId string) {
	@ui.Page() {
		<div class="flex flex-col gap-0">
			<h3 class="m-2">The Word Among Us â€¢ <span class="text-muted">{ roomId }</span></h3>
			<div
				class="w-full p-12"
				hx-ext="ws"
				ws-connect={ ui.StringURL(fmt.Sprintf("/rooms/%s/ws", roomId)) }
			>
				@partialGameState(nil, "")
			</div>
		</div>
	}
}

templ partialGameState(state game_state.GameState, selfPlayerId string) {
	<div id="game_state" class="flex flex-col gap-10" hx-swap-oob="outerHTML">
		if state != nil {
			@partialPlayers(state, selfPlayerId)
			<div class="grid grid-cols-6 gap-8">
				<div class="col-span-6 lg:col-span-4">
					@partialPlayerAction(state, selfPlayerId)
				</div>
				<div class="col-span-6 lg:col-span-2">
					@partialSynonyms(state)
				</div>
			</div>
		}
	</div>
}

templ partialSynonyms(state game_state.GameState) {
	<div class="flex flex-col gap-6">
		<h2>Synonyms</h2>
		<div class="flex flex-col gap-4 border border-dashed p-4 overflow-auto">
			for _, v := range state.GetGame().Synonyms() {
				<div class="flex flex-col gap-1">
					<p class="font-bold">
						{ state.GetGame().Players()[v.PlayerIndex].Name }:
					</p>
					<p>
						{ v.Synonym }
					</p>
				</div>
			}
		</div>
	</div>
}

templ partialPlayerAction(state game_state.GameState, selfPlayerId string) {
	<div class="flex flex-col gap-4">
		<h2>Game</h2>
		<div class="flex flex-col gap-2">
			<p>
				State:
				<span class="text-muted italic">
					switch state.(type) {
						case *game_state.Game:
							Pre game
						case *game_state.GamePlayerChooseWord:
							Player choosing word
						case *game_state.GamePlayerTurn:
							Player turn
						case *game_state.GameImposterWon:
							Imposter won
						case *game_state.GameCrewmateWon:
							Crewmates won
					}
				</span>
			</p>
			if state.GetGame().Imposter().Id != "" {
				<p>
					Role:
					<span class="text-muted italic">
						if state.GetGame().Imposter().Id == selfPlayerId {
							Imposter
						} else {
							Crewmate
						}
					</span>
				</p>
			}
			if state.GetGame().Word() != "" {
				<p>
					Word:
					<span class="text-muted italic">
						if state.GetGame().Imposter().Id == selfPlayerId {
							???
						} else {
							{ state.GetGame().Word() }
						}
					</span>
				</p>
			}
		</div>
		switch state := state.(type) {
			case *game_state.Game:
				<button
					type="button"
					class="w-full"
					ws-send
					hx-vals={ game_state.SerializeJsonPanic(
						game_state.NewActionStartJson(),
					) }
				>
					Start game
				</button>
			case *game_state.GamePlayerChooseWord:
				if state.Players()[state.PlayerIndex()].Id == selfPlayerId {
					for i, v := range state.FromWords() {
						<button
							class="w-full"
							type="button"
							ws-send
							hx-vals={ game_state.SerializeJsonPanic(
								game_state.NewActionPlayerChooseWordJson(i),
							) }
						>
							{ v }
						</button>
					}
				} else {
					<p>
						Wait for slow ass { state.Players()[state.PlayerIndex()].Name }
						to choose his word
					</p>
				}
			case *game_state.GamePlayerTurn:
				if state.Players()[state.PlayerIndex()].Id == selfPlayerId {
					<p>It's your turn, what do you want to do?</p>
					<div class="flex flex-col gap-8">
						<form class="flex flex-row gap-2 items-center">
							<input class="flex-1" type="text" name="synonym" placeholder="Synonym:"/>
							<button
								type="submit"
								ws-send
								hx-vals={ game_state.SerializeJsonPanic(
								game_state.NewActionPlayerSaySynonymJson(),
							) }
								hx-include="previous"
								hx-disabled-elt="this"
							>
								Say synonym
							</button>
						</form>
						<button
							class="w-full"
							type="button"
							ws-send
							hx-vals={ game_state.SerializeJsonPanic(
							game_state.NewActionInitVoteJson(),
						) }
							hx-disabled-elt="this"
						>
							Initialize vote
						</button>
					</div>
				} else {
					<p>
						Wait for { state.Players()[state.PlayerIndex()].Name } to 
						make his decision
					</p>
				}
			case *game_state.GameImposterWon:
				<p>
					GG, imposter won
				</p>
				<p>
					Imposter was { state.Imposter().Name }
				</p>
				<button
					class="w-full"
					type="button"
					ws-send
					hx-vals={ game_state.SerializeJsonPanic(
						game_state.NewActionRestartJson(),
					) }
				>
					Restart game?
				</button>
			case *game_state.GameCrewmateWon:
				<p>
					GG, crewmates won
				</p>
				<p>
					Imposter was { state.Imposter().Name }
				</p>
				<button
					class="w-full"
					type="button"
					ws-send
					hx-vals={ game_state.SerializeJsonPanic(
						game_state.NewActionRestartJson(),
					) }
				>
					Restart game?
				</button>
			case *game_state.GameVoteTurn:
				<div class="border border-black p-1 rounded-lg flex flex-col gap-1">
					<p class="italic mb-1">Votes</p>
					for _, v := range state.Picks() {
						<p>{ v.Player.Name } -> { v.Picked.Name }</p>
					}
				</div>
				if state.Game.Players()[state.PlayerIndex()].Id == selfPlayerId {
					<p>Guess who is the imposter</p>
					<div class="flex flex-row gap-4 flex-wrap">
						for _, v := range state.Players(selfPlayerId) {
							<button
								class="w-full"
								type="button"
								ws-send
								hx-vals={ game_state.SerializeJsonPanic( 
									game_state.NewActionVoteJson(v.Index),
								) }
							>
								{ v.Name }
							</button>
						}
					</div>
				} else {
					Wait for { state.Game.Players()[state.PlayerIndex()].Name } to choose the imposter
				}
		}
	</div>
}

templ playerCard(player game_state.Player, turn bool, index int, selfPlayerId string) {
	<div class={ "border p-2 gap-2 flex flex-row items-center", templ.KV("background-primary", turn) }>
		<p class={ "font-bold", templ.KV("text-secondary", player.Id == selfPlayerId) }>
			{ children... }
		</p>
		if player.Id == selfPlayerId {
			<p class="italic">
				[YOU]
			</p>
		}
		<p class="ml-auto text-muted">{ fmt.Sprint(index) }</p>
	</div>
}

templ partialPlayers(state game_state.GameState, selfPlayerId string) {
	<div class="flex flex-col gap-4">
		<h2>Players</h2>
		<div class="flex flex-row flex-wrap items-center gap-4 *:min-w-64 *:flex-1">
			switch state := state.(type) {
				case game_state.PlayerIndex:
					for i, v := range state.GetGame().Players() {
						@playerCard(v, state.PlayerIndex() == i, i, selfPlayerId) {
							{ v.Name }
						}
					}
				default:
					for i, v := range state.GetGame().Players() {
						@playerCard(v, false, i, selfPlayerId) {
							{ v.Name }
						}
					}
			}
		</div>
	</div>
}
